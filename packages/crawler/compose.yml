# Docker file for Crawler, Searxng & valkey, and caddy router
# Tardigrade the Web Scraper / Crawler
# SearXNG Search engine proxy
# IP Rotating Proxy Admin
# Caddy - proxy server router for containers
# Setup and run
# sudo docker network create caddy
# Stop All containers:
# sudo docker stop $(sudo docker ps -q)
# Recreate with new files:
# sudo docker compose up -d  --renew-anon-volumes  --build
# Logs
# sudo docker compose logs -f --tail=1000 scraper

services:

  # Tardigrade the Web Scraper / Crawler
  scraper:
    container_name: scraper
    restart: unless-stopped
    build: .
    ports:
      - 3000:3000
    networks:
      - caddy
    labels:
      caddy: proxy.${DOMAIN:-localhost}
      caddy.reverse_proxy: "{{upstreams 3000}}"

    
  # SearXNG Search engine proxy
  # searxng:
  #   container_name: searxng
  #   image: docker.io/searxng/searxng:latest
  #   restart: unless-stopped
  #   networks:
  #     - caddy
  #   ports:
  #     - 8080:8080
  #   volumes:
  #     - ./searxng-settings.yml:/etc/searxng/settings.yml:rw
  #   environment:
  #     - SEARXNG_BASE_URL=https://search.${DOMAIN:-localhost}
  #     - UWSGI_WORKERS=4
  #     - UWSGI_THREADS=4
  #   cap_drop:
  #     - ALL
  #   cap_add:
  #     - CHOWN
  #     - SETGID
  #     - SETUID
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "1m"
  #       max-file: "1"
  #   labels:
  #     caddy: search.${DOMAIN:-localhost}
  #     caddy.reverse_proxy: "{{upstreams 8080}}"


  # # # IP Rotating Proxy Admin
  # # # scrapoxy:
  # # #   image: fabienvauchelles/scrapoxy
  # # #   ports:
  # # #     - 8888:8888
  # # #     - 8890:8890
  # # #   environment:
  # # #     - NODE_ENV=production
  # # #     - AUTH_LOCAL_USERNAME=admin
  # # #     - AUTH_LOCAL_PASSWORD=password
  # # #     - BACKEND_JWT_SECRET=secret1
  # # #     - FRONTEND_JWT_SECRET=secret2
  # #   # labels:
  # #   #   caddy: proxyadmin.${DOMAIN:-localhost}
  # #   #   caddy.reverse_proxy: "{{upstreams 8890}}"


  # # # Caddy - proxy server router for containers 
  # # # sudo docker network create caddy
  # # caddy:  
  # #   image: lucaslorentz/caddy-docker-proxy:ci-alpine
  # #   ports:
  # #     - 80:80
  # #     - 443:443
  # #   volumes:
  # #     - /var/run/docker.sock:/var/run/docker.sock
  # #     - /var/lib/caddy/data:/data
  # #   restart: unless-stopped
  # #   environment:
  # #     - CADDY_INGRESS_NETWORKS=caddy
  # #   networks:
  # #     - caddy


  # # # valkey - helper for rate limiting 
  # valkey:
  #   container_name: valkey
  #   image: docker.io/valkey/valkey:8-alpine
  #   command: valkey-server --save 30 1 --loglevel warning
  #   restart: unless-stopped
  #   networks:
  #     - caddy
  #   ports:
  #     - 6379:6379
  #   volumes:
  #     - valkey-data2:/data
  #   cap_drop:
  #     - ALL
  #   cap_add:
  #     - SETGID
  #     - SETUID
  #     - DAC_OVERRIDE

networks:
  caddy:
    external: true
  

volumes:
  caddy-data:
  caddy-config:
  valkey-data2:
