// This file is auto-generated by @hey-api/openapi-ts

export type User = {
    /**
     * User supplied username
     */
    username?: string;
    /**
     * User email address
     */
    email?: string;
    /**
     * User password, MUST contain a mix of upper and lower case letters, as well as digits
     */
    password?: string;
};

export type ExtractContentData = {
    body?: never;
    path?: never;
    query: {
        /**
         * URL to extract content from (supports articles, PDFs, YouTube)
         */
        url: string;
        /**
         * Include images in output (default true)
         */
        images?: boolean;
        /**
         * Include hyperlinks in output (default true)
         */
        links?: boolean;
        /**
         * Preserve text formatting (default true)
         */
        formatting?: boolean;
        /**
         * Convert relative URLs to absolute (default true)
         */
        absoluteURLs?: boolean;
        /**
         * HTTP request timeout in seconds (default 5)
         */
        timeout?: number;
    };
    url: '/extract';
};

export type ExtractContentErrors = {
    /**
     * Server error or missing URL parameter
     */
    500: {
        /**
         * Error message
         */
        error?: string;
    };
};

export type ExtractContentError = ExtractContentErrors[keyof ExtractContentErrors];

export type ExtractContentResponses = {
    /**
     * Structured content extraction result
     */
    200: {
        /**
         * Article/video title
         */
        title: string;
        /**
         * Simplified HTML content with standardized structure
         */
        html: string;
        /**
         * APA citation with Last, First Initial format
         */
        cite: string;
        /**
         * Author name in Last, First Middle format
         */
        author_cite?: string;
        /**
         * Author surname only
         */
        author_short?: string;
        /**
         * Type of authorship
         */
        author_type?: 'single' | 'two-author' | 'more-than-two' | 'organization';
        /**
         * Original author string from source
         */
        author?: string;
        /**
         * Publication date in YYYY-MM-DD format
         */
        date?: string;
        /**
         * Publishing organization/site name
         */
        source?: string;
        /**
         * Clean text word count excluding HTML
         */
        word_count: number;
        /**
         * Canonical URL of the resource
         */
        url: string;
    };
};

export type ExtractContentResponse = ExtractContentResponses[keyof ExtractContentResponses];

export type WriteLanguageData = {
    body: {
        /**
         * ðŸ¤– Agent name -  [LangHub](https://smith.langchain.com/hub) template or custom:
         * question(query, chat_history), summarize-bullets(article), summarize(article),
         * suggest-followups(chat_history, article) : string[], answer-cite-sources(context, chat_history, query),
         * query-resolution(chat_history, query), knowledge-graph-nodes(query, article),
         * summary-longtext(summaries)
         *
         */
        agent?: 'question' | 'summarize-bullets' | 'summarize' | 'suggest-followups' | 'answer-cite-sources' | 'query-resolution' | 'knowledge-graph-nodes' | 'summary-longtext';
        /**
         * ðŸ‘„ LIPs Language Intelligence Providers
         */
        provider: 'groq' | 'openai' | 'anthropic' | 'together' | 'xai' | 'google' | 'perplexity' | 'ollama' | 'cloudflare';
        /**
         * ðŸ”‘ API key you provide for ðŸ‘„ Language Intelligence Provider
         */
        key?: string;
        /**
         * ðŸ¤– Model name for ðŸ‘„ Language Intelligence Provider, leave blank for default
         */
        model?: 'dall-e-3' | 'whisper-1' | 'sora-video-gen' | 'palm2' | 'tii-falcon-40b' | 'cohere-command-rplus' | 'sonar-pro' | 'sonar' | 'sonar-reasoning-pro' | 'sonar-reasoning' | 'sonar-deep-research' | 'llama-3.1-sonar-small-128k-online' | 'llama-3.1-sonar-large-128k-online' | 'llama-3.1-sonar-huge-128k-online' | 'deepseek-r1-distill-llama-70b' | 'meta-llama/llama-4-maverick-17b-128e-instruct' | 'meta-llama/llama-4-scout-17b-16e-instruct' | 'llama-3.3-70b-versatile' | 'llama-3.3-70b-specdec' | 'llama-3.2-3b-preview' | 'llama-3.2-11b-vision-preview' | 'llama-3.2-90b-vision-preview' | 'llama-3.1-70b-versatile' | 'llama-3.1-8b-instant' | 'mixtral-8x7b-32768' | 'gemma2-9b-it' | 'gpt-4o' | 'gpt-4o-mini' | 'gpt-4-turbo' | 'gpt-4' | 'gpt-3.5-turbo' | 'claude-opus-4-20250514' | 'claude-sonnet-4-20250514' | 'claude-sonnet-4-20250514-1106' | 'claude-3-7-sonnet-20250219' | 'claude-3-5-sonnet-20241022' | 'claude-3-opus-20240229' | 'claude-3-sonnet-20240229' | 'claude-3-haiku-20240307' | 'meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo' | 'meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo' | 'meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo' | 'meta-llama/Meta-Llama-3-8B-Instruct-Turbo' | 'meta-llama/Meta-Llama-3-70B-Instruct-Turbo' | 'meta-llama/Llama-3.2-3B-Instruct-Turbo' | 'meta-llama/Meta-Llama-3-8B-Instruct-Lite' | 'meta-llama/Meta-Llama-3-70B-Instruct-Lite' | 'meta-llama/Llama-3-8b-chat-hf' | 'meta-llama/Llama-3-70b-chat-hf' | 'nvidia/Llama-3.1-Nemotron-70B-Instruct-HF' | 'Qwen/Qwen2.5-Coder-32B-Instruct' | 'microsoft/WizardLM-2-8x22B' | 'google/gemma-2-27b-it' | 'google/gemma-2-9b-it' | 'databricks/dbrx-instruct' | 'deepseek-ai/deepseek-llm-67b-chat' | 'google/gemma-2b-it' | 'Gryphe/MythoMax-L2-13b' | 'meta-llama/Llama-2-13b-chat-hf' | 'mistralai/Mistral-7B-Instruct-v0.1' | 'mistralai/Mistral-7B-Instruct-v0.2' | 'mistralai/Mistral-7B-Instruct-v0.3' | 'mistralai/Mixtral-8x7B-Instruct-v0.1' | 'mistralai/Mixtral-8x22B-Instruct-v0.1' | 'NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO' | 'Qwen/Qwen2.5-7B-Instruct-Turbo' | 'Qwen/Qwen2.5-72B-Instruct-Turbo' | 'Qwen/Qwen2-72B-Instruct' | 'togethercomputer/StripedHyena-Nous-7B' | 'upstage/SOLAR-10.7B-Instruct-v1.0' | 'meta-llama/Llama-Vision-Free' | 'meta-llama/Llama-3.2-11B-Vision-Instruct-Turbo' | 'meta-llama/Llama-3.2-90B-Vision-Instruct-Turbo' | 'grok-beta' | 'grok-vision-beta' | 'gemini-2.5-pro-preview-05-06' | 'gemini-2.5-flash-preview-04-17' | 'gemini-2.0-flash-001' | 'gemini-2.0-flash-lite-001' | 'gemini-2.0-flash-live-preview-04-09' | 'imagen-3.0-generate-002' | 'imagen-3.0-fast-generate-001' | 'meta-llama/Llama-3.3-70B' | 'gemma-3' | 'gemma-2' | 'gemma';
        /**
         * ðŸ“„ Format of response. true=HTML, false=Markdown
         */
        html?: boolean;
        /**
         * ðŸ”¥ Controls response predictability:
         * - 0 to 1.0: ðŸŽ¯ More deterministic, predictable responses
         * - 1.0 to 2.0: ðŸŽ¨ More creative, varied responses
         *
         */
        temperature?: number;
        /**
         * (context for some agents) Use query to answer
         */
        query?: string;
        /**
         * (context for some agents) Chat history
         */
        chat_history?: string;
        /**
         * (context for some agents) Article to summarize
         */
        article?: string;
    };
    path?: never;
    query?: never;
    url: '/agents';
};

export type WriteLanguageErrors = {
    /**
     * Server error or missing prompt parameter
     */
    500: {
        /**
         * Error message
         */
        error?: string;
    };
};

export type WriteLanguageError = WriteLanguageErrors[keyof WriteLanguageErrors];

export type WriteLanguageResponses = {
    /**
     * Generated language model response (in HTML or Markdown)
     */
    200: {
        /**
         * Generated language model response (in HTML or Markdown)
         */
        content?: string;
        /**
         * Structured JSON extract from response, in some agents
         */
        extact?: {
            [key: string]: unknown;
        };
    };
};

export type WriteLanguageResponse = WriteLanguageResponses[keyof WriteLanguageResponses];

export type SearchWebData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Search query string
         */
        q: string;
        /**
         * Category - general, news, videos, images, science, files, it
         */
        cat?: 'general' | 'news' | 'videos' | 'images' | 'science' | 'files' | 'it';
        /**
         * Recency filter - filter results by time period
         */
        recency?: 'none' | 'day' | 'week' | 'month' | 'year';
        /**
         * Use public server instances (optional)
         */
        public?: boolean;
        /**
         * Pagination for results (optional)
         */
        page?: number;
        /**
         * Language
         */
        lang?: string;
    };
    url: '/search';
};

export type SearchWebErrors = {
    /**
     * Missing required query parameter `q`
     */
    400: {
        error?: string;
    };
    /**
     * Server error when fetching search results
     */
    500: {
        error?: string;
    };
};

export type SearchWebError = SearchWebErrors[keyof SearchWebErrors];

export type SearchWebResponses = {
    /**
     * A list of search results
     */
    200: {
        results?: Array<{
            /**
             * Title of the search result
             */
            title?: string;
            /**
             * URL of the search result
             */
            url?: string;
            /**
             * Snippet of the text around the query
             */
            snippet?: string;
            /**
             * Domain of the search result
             */
            domain?: string;
            /**
             * Favicon of the search result
             */
            favicon?: string;
            /**
             * Path of the search result
             */
            path?: string;
            /**
             * Engines used to find the search result
             */
            engines?: Array<unknown>;
        }>;
    };
};

export type SearchWebResponse = SearchWebResponses[keyof SearchWebResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};