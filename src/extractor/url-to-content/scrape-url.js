/**
 * Scrape with timeout, redirects, default UA, and bot detection checking
 * @param {string} url - url to fetch
 * @param {object} options
 * @param {number} options.timeout=5 -  abort request if not retrived, in seconds
 * @param {number} options.maxRedirects=3 - max redirects to follow
 * @param {number} options.checkBotDetection=true - check for bot detection messages
 * @param {number} options.redirectCount=0 - current redirect count
 * @returns {Promise<Object>} - fetch response or error object
 * @category Extractor
 * @example await scrapeURL("https://hckrnews.com", {timeout: 5, maxRedirects: 5})
 */
export async function scrapeURL(url, options = {}) {
  try {
    let {
      timeout = 5,
      redirectCount = 0,
      checkBotDetection = true,
      maxRedirects = 3,
    } = options;

    options = {
      ...options,
      "Accept-Language": "en",
      "User-Agent":
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36,gzip(gfe)",
      signal: AbortSignal.timeout(timeout * 1000),
    };

    let response = await fetch(url, {});

    if (response.redirected) {
      if (redirectCount > maxRedirects)
        return { error: "Max redirects exceeded" };
      redirectCount++;
      options = { ...options, redirectCount };

      return scrapeURL(response.url, options);
    }

    const contentType = response.headers.get("Content-Type");

    if (contentType.includes("application/json")) {
      return await response.json();
    } else if (contentType.includes("text")) {
      var html = await response.text();
      if (checkBotDetection && isHTMLBotDetection(html))
        return { error: "Bot detected" }; //, html: response.html };

      return html;
    } else {
      // For other types, return as arrayBuffer
      return await response.arrayBuffer();
    }
  } catch (e) {
    return { error: "Error in fetch" };
  }
}

/**
 * Check html for bot block messages
 * @param {string} html
 * @returns {Boolean} - if bot detection message found
 * @category Extractor
 */
function isHTMLBotDetection(html) {
  var commonBlocks = [
    "The security system for this website has been triggered",
    "You do not have permission to view this page.",
    "Your request has been blocked due to a network policy.",
    "Cloudflare Ray ID found ",
    "Our systems have detected unusual traffic from your computer network. This page checks to see if it's really you sending the requests, and not a robot. ",
    "Please verify you are a human",
    "Our systems have detected unusual traffic activity from your network. Please complete this reCAPTCHA",
    "Sorry, we just need to make sure you're not a robot",
    "Access to this page has been denied",
    "<p>Please enable JS and disable any ad blocker</p></p>",
    "Please make sure your browser supports JavaScript",
    "Please complete the security check to access",
    "https://errors.edgesuite.net",
    "Please enable JS and disable any ad blocker",
    "The resource you are looking for might have been removed, had its name changed, or is temporarily unavailable.",
    "We’re currently checking your connection. This shouldn’t take long.",
    "Generated by cloudfront (CloudFront) Request ID",
  ];

  return commonBlocks.filter((msg) => html?.indexOf(msg) > -1).length > 0;
}
