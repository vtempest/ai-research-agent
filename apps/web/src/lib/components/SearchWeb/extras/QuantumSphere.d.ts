/**
 * @module QuantumSphere
 * Parabolic spherical orbital, inspired by quantum superposition and the 
 * [wave function collapse](https://en.wikipedia.org/wiki/Wave_function_collapse).
 * @author [vtempest (2025)](https://github.com/vtempest)
 */
/**
 * Configuration object for the Quantum Wave Orbital component
 * Controls all aspects of the orbital sphere's appearance and behavior
 */
export interface OrbitalSphereConfig {
    /** Minimum number of orbital lines to generate (default: 6) */
    minLines: number;
    
    /** Maximum number of orbital lines to generate (default: 12) */
    maxLines: number;
    
    /** Minimum sphere diameter in pixels (default: 120) */
    minSphereSize: number;
    
    /** Maximum sphere diameter in pixels (default: 180) */
    maxSphereSize: number;
    
    /** Minimum border width for orbital lines in pixels (default: 0.8) */
    minLineWidth: number;
    
    /** Maximum border width for orbital lines in pixels (default: 1.6) */
    maxLineWidth: number;
    
    /** Minimum glow intensity for box-shadow effect in pixels (default: 6) */
    minGlowIntensity: number;
    
    /** Maximum glow intensity for box-shadow effect in pixels (default: 12) */
    maxGlowIntensity: number;
    
    /** Minimum rotation speed in seconds per full rotation (default: 0.5) */
    minRotationSpeed: number;
    
    /** Maximum rotation speed in seconds per full rotation (default: 2) */
    maxRotationSpeed: number;
    
    /** Minimum HSL saturation percentage (0-100) for colors (default: 70) */
    minSaturation: number;
    
    /** Maximum HSL saturation percentage (0-100) for colors (default: 90) */
    maxSaturation: number;
    
    /** Minimum HSL lightness percentage (0-100) for colors (default: 50) */
    minLightness: number;
    
    /** Maximum HSL lightness percentage (0-100) for colors (default: 70) */
    maxLightness: number;
    
    /** Minimum time in milliseconds before auto-randomizing sphere (default: 5000) */
    autoRandomizeMin: number;
    
    /** Maximum time in milliseconds before auto-randomizing sphere (default: 12000) */
    autoRandomizeMax: number;
    
    /** Overall opacity for all orbital lines (0-1) (default: 0.75) */
    opacity: number;
  }
  
  /**
   * Individual orbital line data structure
   * Each line represents one orbital ring in the sphere
   */
  export interface OrbitalLine {
    /** Unique identifier for the orbital line */
    id: number;
    
    /** Initial X-axis rotation angle in degrees (0-360) */
    angleX: number;
    
    /** Initial Y-axis rotation angle in degrees (0-360) */
    angleY: number;
    
    /** Initial Z-axis rotation angle in degrees (0-360) */
    angleZ: number;
    
    /** HSL hue value for this line's color (0-360) */
    hue: number;
    
    /** Speed multiplier for this line's rotation (0.5-1.5) */
    speed: number;

    /** Lightness in monochrome scheme */
    customLightness: number;
  }
  
  /**
   * Generated sphere configuration containing all computed values
   * Created by generateSphereConfig() function
   */
  export interface SphereData {
    /** Array of orbital line configurations */
    lines: OrbitalLine[];
    
    /** Computed sphere size in pixels */
    sphereSize: number;
    
    /** Computed line width in pixels */
    lineWidth: number;
    
    /** Computed glow intensity in pixels */
    glowIntensity: number;
    
    /** Computed base rotation speed in seconds */
    rotationSpeed: number;
    
    /** Computed HSL saturation percentage */
    saturation: number;
    
    /** Computed HSL lightness percentage */
    lightness: number;
    
    /** Name of the color scheme being used */
    colorScheme: ColorScheme;
  }
  
  /**
   * Hover effects applied when mouse hovers over orbital lines
   * Generated randomly on each hover interaction
   */
  export interface HoverEffects {
    /** Hue shift amount in degrees (-90 to 90) */
    hueShift: number;
    
    /** Saturation boost percentage (10-30) */
    saturationBoost: number;
    
    /** Lightness shift percentage (-20 to 20) */
    lightnessShift: number;
    
    /** Glow intensity multiplier (1.5-3) */
    glowMultiplier: number;
    
    /** Rotation speed multiplier (0.3-2.5) */
    speedMultiplier: number;
    
    /** Scale transformation multiplier (1.1-1.4) */
    scaleMultiplier: number;
  }
  
  /**
   * Computed CSS styles for individual orbital lines
   * Generated by the effect and applied to each line element
   */
  export interface LineStyle {
    /** CSS transform string with rotation and scale */
    transform: string;
    
    /** Border color as HSLA string */
    borderColor: string;
    
    /** Border width in pixels */
    borderWidth: string;
    
    /** Box shadow for glow effect */
    boxShadow: string;
    
    /** Animation duration in seconds */
    animationDuration: string;
    
    /** Z-index for layering (higher for hovered lines) */
    zIndex: number;
  }
  
  /**
   * Props interface for the OrbitalSphere Svelte component
   * Defines all possible props that can be passed to the component
   */
  export interface OrbitalSphereProps {
    /** Configuration object controlling sphere behavior and appearance */
    config?: OrbitalSphereConfig;
    
    /** Whether to automatically randomize the sphere periodically */
    autoRandomize?: boolean;
    
    /** Additional CSS classes to apply to the container */
    className?: string;
    
    /** Callback function triggered when the sphere is clicked */
    onSphereClick?: (() => void) | null;
  }
  
  /**
   * Type for the random number generator function
   * Uses a seeded linear congruential generator for consistent randomness
   */
  export type RandomFunction = () => number;
  
  /**
   * Type for the random range utility function
   * Generates a random number between min and max (inclusive)
   */
  export type RandomRangeFunction = (min: number, max: number) => number;
  
  /**
   * Type for the random integer utility function  
   * Generates a random integer between min and max (inclusive)
   */
  export type RandomIntFunction = (min: number, max: number) => number;
  
  /**
   * Color scheme types supported by the orbital sphere
   * Determines how colors are distributed across orbital lines
   */
  export type ColorScheme = 
  | 'Single' 
  | 'Dual' 
  | 'Rainbow' 
  | 'Random'
  | 'Complementary'
  | 'Triadic'
  | 'Analogous'
  | 'Split'
  | 'Tetradic'
  | 'Monochromatic'
  | 'Warm'
  | 'Cool'
  | 'Neon'
  | 'Sunset'
  | 'Ocean'
  | 'Forest'
  | 'Galaxy'
  | 'Fire'
  | 'Ice'
  | 'Cyberpunk'
  | 'Pastel'
  | 'Vintage'
  | 'Gradient'
  | 'Electric';
  /**
   * Complete type definition for the component's internal state
   * Includes all reactive variables and computed values
   */
  export interface OrbitalSphereState {
    /** Current sphere configuration and line data */
    sphereData: SphereData;
    
    /** Current hue shift amount for color animation */
    hueShift: number;
    
    /** ID of currently hovered orbital line (null if none) */
    hoveredLineId: number | null;
    
    /** Current hover effects configuration */
    hoverEffects: HoverEffects;
    
    /** Reference to the sphere DOM element */
    sphereRef: HTMLElement | null;
    
    /** Timeout ID for auto-randomization */
    timeoutId: number | null;
    
    /** Timeout ID for hue shift animation */
    hueTimeoutId: number | null;
    
    /** Computed styles for each orbital line */
    lineStyles: Record<number, LineStyle>;
  }