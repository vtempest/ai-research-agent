"use strict";(self.webpackChunkqwksearch_api_docs=self.webpackChunkqwksearch_api_docs||[]).push([[2592],{19509:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"neural-net/statistics/predict-statistics","title":"predict-statistics","description":"neural-net-training / statistics/predict-statistics","source":"@site/src/neural-net/statistics/predict-statistics.md","sourceDirName":"neural-net/statistics","slug":"/neural-net/statistics/predict-statistics","permalink":"/docs/neural-net/statistics/predict-statistics","draft":false,"unlisted":false,"editUrl":"https://github.com/vtempest/ai-research-agent/tree/master/apps/docs/src/neural-net/statistics/predict-statistics.md","tags":[],"version":"current","frontMatter":{},"sidebar":"default","previous":{"title":"predict-next-word","permalink":"/docs/neural-net/next-word-prediction/scripts/predict-next-word"},"next":{"title":"similarity-remote-api","permalink":"/docs/neural-net/vectorize/similarity-remote-api"}}');var i=r(31085),t=r(71184);const d={},c=void 0,l={},a=[{value:"calculateRollingStats()",id:"calculaterollingstats",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"loadModel()",id:"loadmodel",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"predictFuture()",id:"predictfuture",level:2},{value:"Parameters",id:"parameters-2",level:3},{value:"Returns",id:"returns-2",level:3},{value:"saveModel()",id:"savemodel",level:2},{value:"Parameters",id:"parameters-3",level:3},{value:"Returns",id:"returns-3",level:3},{value:"trainModels()",id:"trainmodels",level:2},{value:"Parameters",id:"parameters-4",level:3},{value:"Returns",id:"returns-4",level:3},{value:"See",id:"see",level:3},{value:"Example",id:"example",level:3}];function o(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/neural-net/modules",children:"neural-net-training"})," / statistics/predict-statistics"]}),"\n",(0,i.jsx)(s.h2,{id:"calculaterollingstats",children:"calculateRollingStats()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"function calculateRollingStats(\n   data: any[], \n   field: string, \n   window: number): any[];\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/vtempest/ai-research-agent/tree/master/packages/neural-net/src/statistics/predict-statistics.js#L303",children:"statistics/predict-statistics.js:303"})]}),"\n",(0,i.jsx)(s.p,{children:"Calculate rolling statistics for a given array of values"}),"\n",(0,i.jsx)(s.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Parameter"}),(0,i.jsx)("th",{children:"Type"}),(0,i.jsx)("th",{children:"Default value"}),(0,i.jsx)("th",{children:"Description"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"data"})})}),(0,i.jsx)("td",{children:(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"any"}),"[]"]})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"undefined"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"Array of data objects"})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"field"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"string"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"undefined"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"Field name to calculate rolling stats for"})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"window"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"7"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"Rolling window size"})})]})]})]}),"\n",(0,i.jsx)(s.h3,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"any"}),"[]"]}),"\n",(0,i.jsx)(s.p,{children:"Array with added rolling statistics"}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"loadmodel",children:"loadModel()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"function loadModel(modelPath: string): Promise<void>;\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/vtempest/ai-research-agent/tree/master/packages/neural-net/src/statistics/predict-statistics.js#L289",children:"statistics/predict-statistics.js:289"})]}),"\n",(0,i.jsx)(s.p,{children:"Loads a trained XGBoost model from the specified file path"}),"\n",(0,i.jsx)(s.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Parameter"}),(0,i.jsx)("th",{children:"Type"}),(0,i.jsx)("th",{children:"Description"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"modelPath"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"string"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"Path to the saved model file"})})]})})]}),"\n",(0,i.jsx)(s.h3,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"Promise"}),"<",(0,i.jsx)(s.code,{children:"void"}),">"]}),"\n",(0,i.jsx)(s.p,{children:"Promise that resolves when the model is loaded"}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"predictfuture",children:"predictFuture()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"function predictFuture(futureData: Object[], options: object): Promise<Object[]>;\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/vtempest/ai-research-agent/tree/master/packages/neural-net/src/statistics/predict-statistics.js#L243",children:"statistics/predict-statistics.js:243"})]}),"\n",(0,i.jsx)(s.p,{children:"Predicts target variable for future data using the trained XGBoost model"}),"\n",(0,i.jsx)(s.h3,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Parameter"}),(0,i.jsx)("th",{children:"Type"}),(0,i.jsx)("th",{children:"Description"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"futureData"})})}),(0,i.jsx)("td",{children:(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"Object"}),"[]"]})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"Array of weather data objects for future dates"})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"{ }"})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"\u2010"})})]})]})]}),"\n",(0,i.jsx)(s.h3,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"Promise"}),"<",(0,i.jsx)(s.code,{children:"Object"}),"[]>"]}),"\n",(0,i.jsx)(s.p,{children:"Promise resolving to array of data objects with predictions"}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"savemodel",children:"saveModel()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"function saveModel(modelPath: string): Promise<void>;\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/vtempest/ai-research-agent/tree/master/packages/neural-net/src/statistics/predict-statistics.js#L280",children:"statistics/predict-statistics.js:280"})]}),"\n",(0,i.jsx)(s.p,{children:"Saves the trained XGBoost model to the specified file path"}),"\n",(0,i.jsx)(s.h3,{id:"parameters-3",children:"Parameters"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Parameter"}),(0,i.jsx)("th",{children:"Type"}),(0,i.jsx)("th",{children:"Description"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"modelPath"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"string"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"Path where the model should be saved"})})]})})]}),"\n",(0,i.jsx)(s.h3,{id:"returns-3",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"Promise"}),"<",(0,i.jsx)(s.code,{children:"void"}),">"]}),"\n",(0,i.jsx)(s.p,{children:"Promise that resolves when the model is saved"}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"trainmodels",children:"trainModels()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"function trainModels(\n   fullData: Object[], \n   targetName: string, \n   options: object): number;\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/vtempest/ai-research-agent/tree/master/packages/neural-net/src/statistics/predict-statistics.js#L103",children:"statistics/predict-statistics.js:103"})]}),"\n",(0,i.jsx)(s.p,{children:"Trains an XGBoost model on preprocessed data and evaluates its performance."}),"\n",(0,i.jsx)(s.p,{children:"XGBoost (eXtreme Gradient Boosting) works by sequentially building decision trees\nwhere each new tree corrects errors made by the ensemble of previous trees.\nIt uses gradient descent to minimize a loss function by adding trees that\npredict the residuals or errors of prior trees, then combining them through boosting.\nThe algorithm employs regularization techniques to prevent overfitting and handles\nmissing values effectively through its sparsity-aware split finding approach."}),"\n",(0,i.jsx)(s.h3,{id:"parameters-4",children:"Parameters"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Parameter"}),(0,i.jsx)("th",{children:"Type"}),(0,i.jsx)("th",{children:"Description"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"fullData"})})}),(0,i.jsx)("td",{children:(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"Object"}),"[]"]})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"Preprocessed training data as array of objects with numeric values only"})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"targetName"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"string"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"Name of the target variable column to predict"})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options"})})}),(0,i.jsx)("td",{children:(0,i.jsxs)(s.p,{children:["{ ",(0,i.jsx)(s.code,{children:"featuresToUse"}),": ",(0,i.jsx)(s.code,{children:"string"}),"[]; ",(0,i.jsx)(s.code,{children:"testSize"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"xgbParams"}),": { ",(0,i.jsx)(s.code,{children:"alpha"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"colsample_bytree"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"early_stopping_rounds"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"eta"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"gamma"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"lambda"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"max_depth"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"min_child_weight"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"nrounds"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"nthread"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"objective"}),": ",(0,i.jsx)(s.code,{children:"string"}),"; ",(0,i.jsx)(s.code,{children:"seed"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"subsample"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"verbosity"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; }; }"]})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"Configuration options for model training"})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.featuresToUse"})})}),(0,i.jsx)("td",{children:(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"string"}),"[]"]})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"Specific feature columns to use for training"})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.testSize"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"Proportion of data to use for testing (default: 0.2)"})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.xgbParams"})})}),(0,i.jsx)("td",{children:(0,i.jsxs)(s.p,{children:["{ ",(0,i.jsx)(s.code,{children:"alpha"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"colsample_bytree"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"early_stopping_rounds"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"eta"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"gamma"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"lambda"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"max_depth"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"min_child_weight"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"nrounds"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"nthread"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"objective"}),": ",(0,i.jsx)(s.code,{children:"string"}),"; ",(0,i.jsx)(s.code,{children:"seed"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"subsample"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; ",(0,i.jsx)(s.code,{children:"verbosity"}),": ",(0,i.jsx)(s.code,{children:"number"}),"; }"]})}),(0,i.jsxs)("td",{children:[(0,i.jsx)(s.p,{children:"XGBoost hyperparameters like learning_rate, max_depth, etc."}),(0,i.jsx)(s.p,{children:"// General Parameters"})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.xgbParams.alpha"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"[default=0, alias: reg_alpha] L1 regularization on weights\nEncourages sparsity by penalizing non-zero weights (feature selection).\nSet to 0 as gamma is being used for regularization."})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.xgbParams.colsample_bytree"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"[default=1] Fraction of features used per tree\nControls feature sampling for each tree, similar to Random Forest.\nSet to 0.9 to reduce overfitting and create diverse trees."})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.xgbParams.early_stopping_rounds"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"Stop training if performance doesn't improve\nStops adding trees when the validation metric doesn't improve for specified rounds.\nSet to 20 to prevent overfitting by stopping when the model stops improving."})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.xgbParams.eta"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"[default=0.3, alias: learning_rate] Step size shrinkage\nControls how much weight is given to new trees in each boosting round.\nSmaller values (0.1) make the model more robust by shrinking feature weights.\nSet to 0.1 to allow more conservative boosting, requiring more trees but improving generalization."})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.xgbParams.gamma"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})})}),(0,i.jsxs)("td",{children:[(0,i.jsx)(s.p,{children:"[default=0, alias: min_split_loss] Minimum loss reduction for a split\nControls the minimum reduction in the loss function required to make a split.\nSet to 0.1 to make splitting more conservative and reduce overfitting."}),(0,i.jsx)(s.p,{children:"// Regularization Parameters"})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.xgbParams.lambda"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})})}),(0,i.jsxs)("td",{children:[(0,i.jsx)(s.p,{children:"[default=1, alias: reg_lambda] L2 regularization on weights\nPenalizes large weights to prevent overfitting (similar to Ridge regression).\nDefault value of 1 provides moderate regularization."}),(0,i.jsx)(s.p,{children:"// Learning Control Parameters"})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.xgbParams.max_depth"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"[default=6] Maximum depth of each tree\nControls model complexity. Higher values create more complex trees that may overfit.\nReduced from 8 to 6 to limit tree complexity and prevent overfitting."})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.xgbParams.min_child_weight"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"[default=1] Minimum sum of instance weight in a child\nControls the minimum number of instances needed in a leaf node.\nSet to 3 to prevent the model from creating overly specific rules based on few samples."})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.xgbParams.nrounds"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"Number of boosting rounds (trees to build)\nSet to 1000 to compensate for the lower learning rate (eta),\nallowing the model to converge slowly but more accurately."})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.xgbParams.nthread"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"Number of parallel threads used for training\nSet to 4 to utilize multi-core processing without overwhelming the system."})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.xgbParams.objective"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"string"})})}),(0,i.jsx)("td",{children:(0,i.jsxs)(s.p,{children:["Specifies the learning task and objective\n'reg",":squarederror","': Regression with squared loss (minimize MSE)\nOptions include classification objectives, ranking, and other regression metrics."]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.xgbParams.seed"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"[default=0] Random number seed for reproducibility\nSet to 42 to ensure consistent results across training runs."})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.xgbParams.subsample"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:"[default=1] Fraction of training instances used per tree\nValues < 1 implement random sampling of the training data for each tree.\nSet to 0.9 to reduce overfitting by introducing randomness while using most of the data."})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"options.xgbParams.verbosity"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})})}),(0,i.jsxs)("td",{children:[(0,i.jsx)(s.p,{children:"[default=1] Controls the verbosity of XGBoost's output\n0: silent mode (no messages)\n1: warnings only\n2: info messages\n3: debug messages"}),(0,i.jsx)(s.p,{children:"// Tree Booster Parameters (Control tree structure)"})]})]})]})]}),"\n",(0,i.jsx)(s.h3,{id:"returns-4",children:"Returns"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"number"})}),"\n",(0,i.jsx)(s.p,{children:"R\xb2 value (coefficient of determination) indicating model accuracy"}),"\n",(0,i.jsx)(s.h3,{id:"see",children:"See"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://xgboost.readthedocs.io/en/release_3.0.0/parameter.html",children:"XGBoost_parameters"})}),"\n",(0,i.jsx)(s.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:'let data = [\n   {\n     "feature1": 1,\n     "feature2": 2,\n     "target": 3\n   }\n ];\n let options = {\n   xgbParams: {\n     verbosity: 0,\n     max_depth: 7,\n     eta: 0.07,\n     objective: \'reg:squarederror\',\n     nthread: 4,\n   }\n };\n let accuracy = await trainModels(data, \'target\', options);\n console.log(accuracy);\n'})})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},71184:(e,s,r)=>{r.d(s,{R:()=>d,x:()=>c});var n=r(14041);const i={},t=n.createContext(i);function d(e){const s=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);