{
  "$schema": "../../node_modules/@apidevtools/openapi-schemas/schemas/v3.1/schema.json",
  "openapi": "3.1.0",
  "info": {
    "description": "Search, extract, vectorize and outline a topic base with AI Research Agent.\n",
    "version": "1.0.0",
    "title": "QwkSearch API",
    "x-privacyPolicy": "http://qwksearch.com/legal/privacy/",
    "contact": {
      "name": "QwkSearch",
      "email": "support@qwksearch.com"
    },
    "x-logo": {
      "url": "https://qwksearch.com/icons/qwksearch-logo.svg",
      "altText": "logo"
    }
  },
  "paths": {
    "/extract": {
      "get": {
        "tags": ["Services"],
        "operationId": "extractContent",
        "summary": "## Extract structured content and cite from any URL",
        "description": "![Extractor](https://i.imgur.com/nNfHmct.png)\n\n### üöúüìú Tractor the Text Extractor \n1. Main Content Detection: Extract the main content from a URL by combining \nMozilla Readability and Postlight Mercury algorithms, utilizing over 100 \ncustom adapters for major sites for article, author, date HTML classes.\n2. Basic HTML Standardization: Transform complex HTML into a simplified \nreading-mode format of basic HTML, making it ideal for research note archival\n  and focused reading, with headings, images and links.\n3. YouTube Transcript Processing: When a YouTube video URL is detected, \nretrieve the complete video transcript including both manual captions and \nauto-generated subtitles, maintaining proper timestamp synchronization and \nspeaker identification where available.\n4. PDF to HTML: Process PDF documents by extracting\n  formatted text while intelligently handling line breaks, page headers, \nfootnotes. The system analyzes text height statistics to automatically\ninfer heading levels, creating a properly structured document hierarchy\nbased on standard deviation from mean text size.\n5. Citation Information Extraction: Identify and extract citation metadata\nincluding author names, publication dates, sources, and titles using HTML\nmeta tags and common class name patterns. The system validates author names\nagainst a comprehensive database of 90,000 first and last names, \ndistinguishing between personal and organizational authors to properly \nformat citations.\n6. Author Name Formatting: Process author names by checking against \nknown name databases, handling affixes and titles correctly, and determining\n  whether to reverse the name order based on whether it's a personal or \norganizational author, ensuring proper citation formatting.\n",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "URL to extract content from (supports articles, PDFs, YouTube)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "images",
            "in": "query",
            "description": "Include images in output (default true)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "links",
            "in": "query",
            "description": "Include hyperlinks in output (default true)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "formatting",
            "in": "query",
            "description": "Preserve text formatting (default true)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "absoluteURLs",
            "in": "query",
            "description": "Convert relative URLs to absolute (default true)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "HTTP request timeout in seconds (default 5)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 30,
              "default": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Structured content extraction result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "Article/video title"
                    },
                    "html": {
                      "type": "string",
                      "description": "Simplified HTML content with standardized structure"
                    },
                    "cite": {
                      "type": "string",
                      "description": "APA citation with Last, First Initial format"
                    },
                    "author_cite": {
                      "type": "string",
                      "description": "Author name in Last, First Middle format"
                    },
                    "author_short": {
                      "type": "string",
                      "description": "Author surname only"
                    },
                    "author_type": {
                      "type": "string",
                      "enum": [
                        "single",
                        "two-author",
                        "more-than-two",
                        "organization"
                      ],
                      "description": "Type of authorship"
                    },
                    "author": {
                      "type": "string",
                      "description": "Original author string from source"
                    },
                    "date": {
                      "type": "string",
                      "format": "date",
                      "description": "Publication date in YYYY-MM-DD format"
                    },
                    "source": {
                      "type": "string",
                      "description": "Publishing organization/site name"
                    },
                    "word_count": {
                      "type": "integer",
                      "description": "Clean text word count excluding HTML"
                    },
                    "url": {
                      "type": "string",
                      "format": "uri",
                      "description": "Canonical URL of the resource"
                    }
                  },
                  "required": ["title", "html", "cite", "word_count", "url"]
                }
              }
            }
          },
          "500": {
            "description": "Server error or missing URL parameter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agents": {
      "post": {
        "tags": ["Services"],
        "operationId": "writeLanguage",
        "summary": "## Generate language model reply using agent prompts",
        "description": "\n- ‚ùì **Inputs**: üëÑ Language Intelligence Provider, üîë API Key,  ü§ñ agent template name, üß† model name and options,\n  and üÜé context variables for that agent\n- ü§ñ **Agent Instruction Templates**: [LangHub](https://smith.langchain.com/hub) template or custom: \n  question(query, chat_history), summarize-bullets(article), summarize(article), \n  suggest-followups(chat_history, article), answer-cite-sources(context, chat_history, query),\n  query-resolution(chat_history, query), knowledge-graph-nodes(query, article), \n  summary-longtext(summaries)\n- üß† **How Language Models Work**: Language models learn from billions of text examples to \nidentify statistical patterns and structures across diverse sources, converting words into\n high-dimensional vectors‚Äînumerical lists that capture meaning and relationships between concepts. \nThese mathematical representations allow models to understand that \"king/queen\" share properties \nand \"Paris/France\" mirrors \"Tokyo/Japan\" through their transformer architecture, a neural network \nbackbone that processes information through multiple layers of analysis. The attention mechanism \nenables the system to dynamically focus on relevant parts of input text when generating each word, \nmaintaining context like humans tracking conversation threads, while calculating probability scores \nacross the entire vocabulary for each word position based on processed context. Rather than retrieving\n stored responses, models create novel text by selecting the most probable words given learned \npatterns, maintaining coherence across long passages while adapting to specific prompt nuances\n through deep pattern recognition.  \n **Self-Attention**: Each word creates three representations: Query (what it's looking for), Key (what\n  it offers), and Value (its actual content). For example, in \"The cat sat on the mat,\" the word \"cat\" \n  has a Query vector that searches for actions, a Key vector that advertises itself as a subject, and \n  a Value vector containing its semantic meaning as an animal. The attention mechanism calculates how\n  much \"cat\" should focus on other words by comparing its Query with their Keys - finding high \n  similarity with \"sat\" (the action) - then combines the corresponding Value vectors to create a\n   contextualized representation where \"cat\" now understands it's the one doing the sitting.\n \n- üìö **Learning Resources**:\n   [LLM Training Example](https://github.com/vtempest/ai-research-agent/blob/master/packages/neural-net/src/train/predict-next-word.js),\n   [LangChain ReactAgent Tools](https://medium.com/@terrycho/how-langchain-agent-works-internally-trace-by-using-langsmith-df23766e7fb4),\n   [Hugging Face Tutorials](https://huggingface.co/learn), [OpenAI Cookbook](https://cookbook.openai.com),\n   [Transformer Overview](https://jalammar.github.io/illustrated-transformer/),\n   [Building Transformer Guide](https://www.datacamp.com/tutorial/building-a-transformer-with-py-torch),\n   [PyTorch Overview](https://www.learnpytorch.io/pytorch_cheatsheet/)\n   \n### üëÑ  Language Intelligence Providers (LIPs)\n\n  | üëÑ Provider | ü§ñ Model Families | üìö Docs | üîë Keys | üí∞ Valuation | üí∏ Revenue (2024) | üí≤ Cost (1M Output) |\n  | :-- | :-- | :-- | :-- | :-- | :-- | :-- |\n  | **XAI** | Grok, Grok Vision | [Docs](https://docs.x.ai/docs#models) | [Keys](https://console.x.ai/) | \\$80B | \\$100M | \\$15.00 |\n  | **Groq** | Llama, DeepSeek, Gemini, Mistral | [Docs](https://console.groq.com/docs/overview) | [Keys](https://console.groq.com/keys) | \\$2.8B | - | \\$0.79 |\n  | **Ollama** | llama, mistral, mixtral, vicuna, gemma, qwen, deepseek, openchat, openhermes, codelama, codegemma, llava, minicpm, wizardcoder, wizardmath, meditrion, falcon | [Docs](https://ollama.com/docs) | [Keys](https://ollama.com/settings/keys) | - | \\$3.2M | \\$0 |\n  | **OpenAI** | o1, o1-mini, o4, o4-mini, gpt-4, gpt-4-turbo, gpt-4-omni | [Docs](https://platform.openai.com/docs/overview) | [Keys](https://platform.openai.com/api-keys) | \\$300B | \\$3.7B | \\$8.00 |\n  | **Anthropic** | Claude Sonnet, Claude Opus, Claude Haiku | [Docs](https://docs.anthropic.com/en/docs/welcome) | [Keys](https://console.anthropic.com/settings/keys) | \\$61.5B | \\$1B | \\$15.00 |\n  | **TogetherAI** | Llama, Mistral, Mixtral, Qwen, Gemma, WizardLM, DBRX, DeepSeek, Hermes, SOLAR, StripedHyena | [Docs](https://docs.together.ai/docs/quickstart) | [Keys](https://api.together.xyz/settings/api-keys) | \\$3.3B | \\$50M | \\$0.90 |\n  | **Perplexity** | Sonar, Sonar Deep Research | [Docs](https://docs.perplexity.ai/models/model-cards) | [Keys](https://www.perplexity.ai/account/api/keys) | \\$18B | \\$20M | \\$15.00 |\n  | **Cloudflare** | Llama, Gemma, Mistral, Phi, Qwen, DeepSeek, Hermes, SQL Coder, Code Llama | [Docs](https://developers.cloudflare.com/workers-ai/) | [Keys](https://dash.cloudflare.com/profile/api-tokens) | \\$62.3B | \\$1.67B | \\$2.25 |\n  | **Google** | Gemini | [Docs](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models) | [Keys](https://cloud.google.com/vertex-ai/generative-ai/docs/start/express-mode/overview#api-keys) | - | ~$400M | \\$10.00 |\n\n![agent_arch_viz](https://i.imgur.com/bailW5n.gif)\n![agent_arch_viz2](https://i.imgur.com/uW6E9VJ.gif)\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["provider", "key"],
                "properties": {
                  "agent": {
                    "type": "string",
                    "enum": [
                      "question",
                      "summarize-bullets",
                      "summarize",
                      "suggest-followups",
                      "answer-cite-sources",
                      "query-resolution",
                      "knowledge-graph-nodes",
                      "summary-longtext"
                    ],
                    "default": "question",
                    "description": "ü§ñ Agent name -  [LangHub](https://smith.langchain.com/hub) template or custom: \nquestion(query, chat_history), summarize-bullets(article), summarize(article), \nsuggest-followups(chat_history, article) : string[], answer-cite-sources(context, chat_history, query),\nquery-resolution(chat_history, query), knowledge-graph-nodes(query, article), \nsummary-longtext(summaries)\n"
                  },
                  "provider": {
                    "type": "string",
                    "default": "groq",
                    "enum": [
                      "groq",
                      "openai",
                      "anthropic",
                      "together",
                      "xai",
                      "google",
                      "perplexity",
                      "ollama",
                      "cloudflare"
                    ],
                    "description": "üëÑ LIPs Language Intelligence Providers"
                  },
                  "key": {
                    "type": "string",
                    "description": "üîë API key you provide for üëÑ Language Intelligence Provider"
                  },
                  "model": {
                    "type": "string",
                    "description": "ü§ñ Model name for üëÑ Language Intelligence Provider, leave blank for default",
                    "default": "meta-llama/llama-4-maverick-17b-128e-instruct",
                    "enum": [
                      "dall-e-3",
                      "whisper-1",
                      "sora-video-gen",
                      "palm2",
                      "tii-falcon-40b",
                      "cohere-command-rplus",
                      "sonar-pro",
                      "sonar",
                      "sonar-reasoning-pro",
                      "sonar-reasoning",
                      "sonar-deep-research",
                      "llama-3.1-sonar-small-128k-online",
                      "llama-3.1-sonar-large-128k-online",
                      "llama-3.1-sonar-huge-128k-online",
                      "deepseek-r1-distill-llama-70b",
                      "meta-llama/llama-4-maverick-17b-128e-instruct",
                      "meta-llama/llama-4-scout-17b-16e-instruct",
                      "llama-3.3-70b-versatile",
                      "llama-3.3-70b-specdec",
                      "llama-3.2-3b-preview",
                      "llama-3.2-11b-vision-preview",
                      "llama-3.2-90b-vision-preview",
                      "llama-3.1-70b-versatile",
                      "llama-3.1-8b-instant",
                      "mixtral-8x7b-32768",
                      "gemma2-9b-it",
                      "gpt-4o",
                      "gpt-4o-mini",
                      "gpt-4-turbo",
                      "gpt-4",
                      "gpt-3.5-turbo",
                      "claude-opus-4-20250514",
                      "claude-sonnet-4-20250514",
                      "claude-sonnet-4-20250514-1106",
                      "claude-3-7-sonnet-20250219",
                      "claude-3-5-sonnet-20241022",
                      "claude-3-opus-20240229",
                      "claude-3-sonnet-20240229",
                      "claude-3-haiku-20240307",
                      "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
                      "meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo",
                      "meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo",
                      "meta-llama/Meta-Llama-3-8B-Instruct-Turbo",
                      "meta-llama/Meta-Llama-3-70B-Instruct-Turbo",
                      "meta-llama/Llama-3.2-3B-Instruct-Turbo",
                      "meta-llama/Meta-Llama-3-8B-Instruct-Lite",
                      "meta-llama/Meta-Llama-3-70B-Instruct-Lite",
                      "meta-llama/Llama-3-8b-chat-hf",
                      "meta-llama/Llama-3-70b-chat-hf",
                      "nvidia/Llama-3.1-Nemotron-70B-Instruct-HF",
                      "Qwen/Qwen2.5-Coder-32B-Instruct",
                      "microsoft/WizardLM-2-8x22B",
                      "google/gemma-2-27b-it",
                      "google/gemma-2-9b-it",
                      "databricks/dbrx-instruct",
                      "deepseek-ai/deepseek-llm-67b-chat",
                      "google/gemma-2b-it",
                      "Gryphe/MythoMax-L2-13b",
                      "meta-llama/Llama-2-13b-chat-hf",
                      "mistralai/Mistral-7B-Instruct-v0.1",
                      "mistralai/Mistral-7B-Instruct-v0.2",
                      "mistralai/Mistral-7B-Instruct-v0.3",
                      "mistralai/Mixtral-8x7B-Instruct-v0.1",
                      "mistralai/Mixtral-8x22B-Instruct-v0.1",
                      "NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO",
                      "Qwen/Qwen2.5-7B-Instruct-Turbo",
                      "Qwen/Qwen2.5-72B-Instruct-Turbo",
                      "Qwen/Qwen2-72B-Instruct",
                      "togethercomputer/StripedHyena-Nous-7B",
                      "upstage/SOLAR-10.7B-Instruct-v1.0",
                      "meta-llama/Llama-Vision-Free",
                      "meta-llama/Llama-3.2-11B-Vision-Instruct-Turbo",
                      "meta-llama/Llama-3.2-90B-Vision-Instruct-Turbo",
                      "grok-beta",
                      "grok-vision-beta",
                      "gemini-2.5-pro-preview-05-06",
                      "gemini-2.5-flash-preview-04-17",
                      "gemini-2.0-flash-001",
                      "gemini-2.0-flash-lite-001",
                      "gemini-2.0-flash-live-preview-04-09",
                      "imagen-3.0-generate-002",
                      "imagen-3.0-fast-generate-001",
                      "meta-llama/Llama-3.3-70B",
                      "gemma-3",
                      "gemma-2",
                      "gemma"
                    ]
                  },
                  "html": {
                    "type": "boolean",
                    "default": true,
                    "description": "üìÑ Format of response. true=HTML, false=Markdown"
                  },
                  "temperature": {
                    "type": "number",
                    "description": "üî• Controls response predictability:\n   - 0 to 1.0: üéØ More deterministic, predictable responses\n   - 1.0 to 2.0: üé® More creative, varied responses\n",
                    "default": 1
                  },
                  "query": {
                    "type": "string",
                    "required": false,
                    "description": "(context for some agents) Use query to answer"
                  },
                  "chat_history": {
                    "type": "string",
                    "required": false,
                    "description": "(context for some agents) Chat history"
                  },
                  "article": {
                    "type": "string",
                    "required": false,
                    "description": "(context for some agents) Article to summarize"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Generated language model response (in HTML or Markdown)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "description": "Generated language model response (in HTML or Markdown)"
                    },
                    "extact": {
                      "type": "object",
                      "description": "Structured JSON extract from response, in some agents"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error or missing prompt parameter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": ["Services"],
        "operationId": "searchWeb",
        "summary": "## Search the web",
        "description": "![AILogo](https://i.imgur.com/yYMTcTX.png)\n\nSearch the web by sending a query via SearXNG metasearch engine of 100+ sources.\nYou can specify the type of content you want‚Äîsuch as general web results,\nnews articles, videos, images, science topics, files, or IT-related \ninformation‚Äîby choosing the appropriate category. \nAdditional filters let you narrow results by recency (like results\nfrom the past day, week, month, or year), language, and page number.\nThe API returns a structured list of results, each including a title, URL, snippet, domain, and other useful details, making it easy to display or analyze the information. This flexible and robust search tool is ideal for apps, research projects, and any situation where up-to-date, diverse web data is needed. \n[Searxng Overview](https://medium.com/@elmo92/search-in-peace-with-searxng-an-alternative-search-engine-that-keeps-your-searches-private-accd8cddd6fc)\n\n**Web Search Stats**: \nGoogle processses 90% of Web Search, 13.6 billion searches every day‚Äîalmost 5 trillion per year.\nIts search index exceeds 100,000,000 GB and covers 130 trillion pages.\nRanking uses over 200 factors, including keyword relevance, backlinks, page speed, and user experience; the top organic result gets about 22% of clicks, and ads allow monetizing keyword traffic.\n\n",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search query string",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cat",
            "in": "query",
            "description": "Category - general, news, videos, images, science, files, it",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "general",
                "news",
                "videos",
                "images",
                "science",
                "files",
                "it"
              ],
              "default": "general"
            }
          },
          {
            "name": "recency",
            "in": "query",
            "description": "Recency filter - filter results by time period",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["none", "day", "week", "month", "year"],
              "default": "none"
            }
          },
          {
            "name": "public",
            "in": "query",
            "description": "Use public server instances (optional)",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination for results (optional)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-US"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Title of the search result"
                          },
                          "url": {
                            "type": "string",
                            "description": "URL of the search result"
                          },
                          "snippet": {
                            "type": "string",
                            "description": "Snippet of the text around the query"
                          },
                          "domain": {
                            "type": "string",
                            "description": "Domain of the search result"
                          },
                          "favicon": {
                            "type": "string",
                            "description": "Favicon of the search result"
                          },
                          "path": {
                            "type": "string",
                            "description": "Path of the search result"
                          },
                          "engines": {
                            "type": "array",
                            "description": "Engines used to find the search result"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required query parameter `q`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error when fetching search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },

  "tags": [
    {
      "name": "Services",
      "description": "Core services of QwkSearch API"
    }
  ],
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Human first and last name",
            "type": "string",
            "minLength": 4
          },
          "email": {
            "description": "User email address",
            "type": "string",
            "format": "email",
            "example": "john.smith@gmail.com"
          
        }
      }
    }
  }
}
