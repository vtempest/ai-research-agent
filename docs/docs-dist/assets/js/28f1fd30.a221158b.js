"use strict";(self.webpackChunkdocusaurus_openapi_typedoc=self.webpackChunkdocusaurus_openapi_typedoc||[]).push([["9426"],{99032:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>c,default:()=>h,contentTitle:()=>d,assets:()=>o,toc:()=>l,metadata:()=>s});var s=JSON.parse('{"id":"functions/topics/ngrams","title":"ngrams","description":"Documentation / topics/ngrams","source":"@site/docs/functions/topics/ngrams.md","sourceDirName":"functions/topics","slug":"/functions/topics/ngrams","permalink":"/docs/functions/topics/ngrams","draft":false,"unlisted":false,"editUrl":"https://github.com/vtempest/ai-research-agent/blob/main/docs/functions/topics/ngrams.md","tags":[],"version":"current","frontMatter":{},"sidebar":"default","previous":{"title":"word-to-root-stem","permalink":"/docs/functions/tokenize/word-to-root-stem"},"next":{"title":"rank-sentences-keyphrases","permalink":"/docs/functions/topics/rank-sentences-keyphrases"}}'),t=r(74132),i=r(50065);let c={},d=void 0,o={},l=[{value:"extractNounEdgeGrams()",id:"extractnounedgegrams",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:3}];function a(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/functions/modules",children:"Documentation"})," / topics/ngrams"]}),"\n",(0,t.jsx)(n.h2,{id:"extractnounedgegrams",children:"extractNounEdgeGrams()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function extractNounEdgeGrams(\n   nGramSize: number, \n   terms: (string | number)[][], \n   index: number, \n   nGrams: object, \n   minWordLength: number, \n   sentenceNumber: number): object;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Defined in: topics/ngrams.js:27"}),"\n",(0,t.jsx)(n.p,{children:"Extracts noun-based edge grams from a given set of terms. This function is crucial\nfor identifying important multi-word concepts in the text."}),"\n",(0,t.jsx)(n.p,{children:"The function looks for sequences of words (n-grams) that:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Start and end with a noun"}),"\n",(0,t.jsx)(n.li,{children:"Contain words that are either nouns or common ignored words (like articles or prepositions)"}),"\n",(0,t.jsx)(n.li,{children:"Meet the minimum word length requirement"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Parameter"}),(0,t.jsx)("th",{children:"Type"}),(0,t.jsx)("th",{children:"Description"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"nGramSize"})})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"number"})})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"The size of the n-grams to extract. For example, 2 for bigrams, 3 for trigrams, etc."})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"terms"})})}),(0,t.jsx)("td",{children:(0,t.jsxs)(n.p,{children:["(",(0,t.jsx)(n.code,{children:"string"})," | ",(0,t.jsx)(n.code,{children:"number"}),")[][]"]})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:'Array of terms, where each term is an array containing the word and its part of speech tag.\nExample: [["The", 1], ["quick", 2], ["brown", 2], ["fox", 3]]'})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"index"})})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"number"})})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"The starting index in the terms array to begin extraction. This allows for sliding window extraction."})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"nGrams"})})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"{ }"})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"Object to store the extracted n-grams."})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"minWordLength"})})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"number"})})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"The minimum length a word should have to be considered in the n-gram."})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"sentenceNumber"})})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"number"})})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"The current sentence number being processed. Used to track which sentences contain the n-gram."})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"object"})}),"\n",(0,t.jsx)(n.p,{children:"The updated nGrams object with newly extracted n-grams."}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'let terms = [["The", 1], ["quick", 2], ["brown", 2], ["fox", 3], ["jumps", 4]];\nlet nGrams = {};\nextractNounEdgeGrams(3, terms, 0, nGrams, 3, 1);\n// nGrams might now contain: {3: {"brown fox jumps": [1]}}\n'})})]})}function h(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},50065:function(e,n,r){r.d(n,{Z:()=>d,a:()=>c});var s=r(39546);let t={},i=s.createContext(t);function c(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);