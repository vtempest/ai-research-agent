"use strict";(self.webpackChunkdocusaurus_openapi_typedoc=self.webpackChunkdocusaurus_openapi_typedoc||[]).push([["138"],{44901:function(e,i,s){s.r(i),s.d(i,{default:()=>h,frontMatter:()=>o,metadata:()=>r,assets:()=>c,toc:()=>l,contentTitle:()=>d});var r=JSON.parse('{"id":"functions/datasets/compile-topic-model","title":"compile-topic-model","description":"Documentation / datasets/compile-topic-model","source":"@site/docs/functions/datasets/compile-topic-model.md","sourceDirName":"functions/datasets","slug":"/functions/datasets/compile-topic-model","permalink":"/docs/functions/datasets/compile-topic-model","draft":false,"unlisted":false,"editUrl":"https://github.com/vtempest/ai-research-agent/docs/functions/datasets/compile-topic-model.md","tags":[],"version":"current","frontMatter":{},"sidebar":"webapp","previous":{"title":"crawler","permalink":"/docs/functions/crawler/"},"next":{"title":"compress-json-jz64","permalink":"/docs/functions/datasets/compress-json-jz64"}}'),n=s("85893"),t=s("50065");let o={},d=void 0,c={},l=[{value:"Other",id:"other",level:2},{value:"weightWikiWordSpecificity()",id:"weightwikiwordspecificity",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Topics",id:"topics",level:2},{value:"compileTopicModel()",id:"compiletopicmodel",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4}];function a(e){let i={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/functions/modules",children:"Documentation"})," / datasets/compile-topic-model"]}),"\n",(0,n.jsx)(i.h2,{id:"other",children:"Other"}),"\n",(0,n.jsx)(i.h3,{id:"weightwikiwordspecificity",children:"weightWikiWordSpecificity()"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"function weightWikiWordSpecificity(query: string): number;\n"})}),"\n",(0,n.jsx)(i.p,{children:"Defined in: datasets/compile-topic-model.js:232"}),"\n",(0,n.jsxs)(i.p,{children:["Find domain-specific unique words for a single doc with BM25 formula\nby using Wikipedia term frequencies as the common words corpus.\nAll words in English Wikipedia are sorted by number of pages they are in for\n325K words with frequencies of at least 32 wikipages, between 3 to 23 characters\nof Latin alphanumerics like az09, punctuation like .-, and diacritics like \xe9\xef,\nbut filtering out numbers and foreign language. ",(0,n.jsx)("br",{}),"\n",(0,n.jsx)("b",{children:"Total Terms (frequency>=32)"}),": 324896 ",(0,n.jsx)("br",{}),"\n",(0,n.jsx)("b",{children:"Filesize (JSON, frequency>=32)"}),": 4MB  ",(0,n.jsx)("br",{}),"\n",(0,n.jsx)("b",{children:"Total Articles (Wiki-en-2020)"}),": 5,989,879 ",(0,n.jsx)("br",{})," ",(0,n.jsx)("br",{})]}),"\n",(0,n.jsxs)(i.p,{children:["Galkin, M., Malykh, V. (2020). Wikipedia TF-IDF Dataset Release (v1.0).\nZenodo. ",(0,n.jsx)(i.a,{href:"https://doi.org/10.5281/zenodo.3631674",children:"https://doi.org/10.5281/zenodo.3631674"})," ",(0,n.jsx)(i.a,{href:"https://github.com/SmartDataAnalytics/Wikipedia_TF_IDF_Dataset",children:"https://github.com/SmartDataAnalytics/Wikipedia_TF_IDF_Dataset"})]}),"\n",(0,n.jsx)(i.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)("table",{children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{children:"Parameter"}),(0,n.jsx)("th",{children:"Type"}),(0,n.jsx)("th",{children:"Description"})]})}),(0,n.jsx)("tbody",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"query"})})}),(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"string"})})}),(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:"phrase to search wiki-idf for each word"})})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"number"})}),"\n",(0,n.jsx)(i.p,{children:"score for term specificity 0-12~"}),"\n",(0,n.jsx)(i.h2,{id:"topics",children:"Topics"}),"\n",(0,n.jsx)(i.h3,{id:"compiletopicmodel",children:"compileTopicModel()"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"function compileTopicModel(options?: object): Promise<void>;\n"})}),"\n",(0,n.jsx)(i.p,{children:"Defined in: datasets/compile-topic-model.js:28"}),"\n",(0,n.jsxs)(i.p,{children:["Compile a topic phrases model from a dictionary and Wikipedia page titles. ",(0,n.jsx)("br",{}),"\nSearch and outline a research base using Wikipedia's 100k popular pages as the core topic\nphrases graph for LLM Research Agents. Most of the documents online (and by extension thinking\nin the collective conciousness) can revolve around core topic phrases linked as a graph.",(0,n.jsx)(i.br,{}),"\n","If all the available docs are nodes, the links in the graph can be extracted Wiki page entities\nand mappings of dictionary phrases to their wiki page. These can serve as topic labels, keywords,\nand suggestions for LLM followup questions. Documents can be linked in a graph with: ",(0,n.jsx)("br",{})]}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:["wiki page entity recognition ",(0,n.jsx)("br",{})," 2. frequent keyphrases ",(0,n.jsx)("br",{})," 3. html links ",(0,n.jsx)("br",{})]}),"\n",(0,n.jsxs)(i.li,{children:["research paper references ",(0,n.jsx)("br",{})," 5. keyphrases to query in global web search ",(0,n.jsx)("br",{})," 6. site-specific recommendations. ",(0,n.jsx)("br",{}),"\nThese can lay the foundation for LLM Research Agents to fully grok, summarize, and outline a research base.   ",(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),"\n240K total words & phrases, first 117K first-word or single words to check every token against. 100K Wikipedia Page Titles and links - Wikipedia most popular pages titles. Also includes domain specificity score and what letters should be capital.",(0,n.jsx)("br",{}),"\n84K  words and 67K phrases in dictionary lexicon  OpenEnglishWordNet, a better updated version of Wordnet - multiple definitions per term, 120k definitions, 45 concept categories",(0,n.jsx)("br",{}),"\nJSON Prefix Trie  - arranged by sorting words and phrases for lookup by first word to tokenize by word, then find if it starts a phrase based on entries, for Phrase Extraction from a text. ",(0,n.jsx)("br",{}),"\nThere is ",(0,n.jsx)("a",{href:"https://johnresig.com/blog/javascript-trie-performance-analysis/",children:'"unanimous consensus"'})," that Prefix Trie ",(0,n.jsx)("a",{href:"https://github.com/daviddwlee84/LeetCode/blob/master/Notes/DataStructure/Trie_PrefixTree.md",children:"O(1) lookups"})," (instead of having to loop through the index for each lookup) makes it the best data type for this task."]}),"\n"]}),"\n",(0,n.jsx)(i.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,n.jsxs)("table",{children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{children:"Parameter"}),(0,n.jsx)("th",{children:"Type"}),(0,n.jsx)("th",{children:"Description"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"options?"})})}),(0,n.jsx)("td",{children:(0,n.jsxs)(i.p,{children:["{ ",(0,n.jsx)(i.code,{children:"addJSONLineBreaks"}),": ",(0,n.jsx)(i.code,{children:"number"}),"; ",(0,n.jsx)(i.code,{children:"addWikiPageTitles"}),": ",(0,n.jsx)(i.code,{children:"boolean"}),"; ",(0,n.jsx)(i.code,{children:"maxSynonymsPerTerm"}),": ",(0,n.jsx)(i.code,{children:"number"}),"; ",(0,n.jsx)(i.code,{children:"minTermCharCount"}),": ",(0,n.jsx)(i.code,{children:"number"}),"; ",(0,n.jsx)(i.code,{children:"sortInFirstTwoLettersTrie"}),": ",(0,n.jsx)(i.code,{children:"boolean"}),"; }"]})}),(0,n.jsx)("td",{})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"options.addJSONLineBreaks?"})})}),(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"number"})})}),(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:"include line breaks in JSON output for debugging"})})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"options.addWikiPageTitles?"})})}),(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"boolean"})})}),(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:"true to add wiki page titles, false for dictionary only"})})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"options.maxSynonymsPerTerm?"})})}),(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"number"})})}),(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:"max synonyms per term"})})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"options.minTermCharCount?"})})}),(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"number"})})}),(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:"min length of term to include"})})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"options.sortInFirstTwoLettersTrie?"})})}),(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"boolean"})})}),(0,n.jsx)("td",{children:(0,n.jsx)(i.p,{children:"sort the first words by first two letters Trie, needd for autocomplete after 2 letters typed"})})]})]})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-1",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"Promise"}),"<",(0,n.jsx)(i.code,{children:"void"}),">"]})]})}function h(e={}){let{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},50065:function(e,i,s){s.d(i,{Z:function(){return d},a:function(){return o}});var r=s(67294);let n={},t=r.createContext(n);function o(e){let i=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(t.Provider,{value:i},e.children)}}}]);